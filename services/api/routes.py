# Auto-generated by Lumenary
##############################################################################
# Dependencies
##############################################################################


from fastapi import Depends, FastAPI, HTTPException, Request, status, Body, UploadFile, File, Form
from fastapi.staticfiles import StaticFiles
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import HTMLResponse, Response

from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse, HTMLResponse, Response
from fastapi.exceptions import RequestValidationError
from fastapi.security import OAuth2PasswordBearer

import sys
import os
import asyncio
import logging
import traceback
import contextvars
import httpx
import jwt
import json
import requests
from pathlib import Path
import builtins

from datetime import datetime, date, time, timedelta
from concurrent.futures import ThreadPoolExecutor
from typing import Callable, Any, TypeVar, Awaitable, List, Optional, Dict, Union, Literal, Annotated, Tuple, Set
from functools import partial, wraps
from uuid import UUID
import uuid

from solar.access import User
from solar.media import MediaFile

from api.utils import get_swagger_ui_html
from api.models import TokenExchangeRequest, TokenResponse, TokenValidationRequest, LogoutResponse

OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
ROUTER_BASE_URL = os.environ.get("ROUTER_BASE_URL")
SOLAR_APP_TOKEN_URL = f"{ROUTER_BASE_URL}/innerApp/oauth2/token"
SOLAR_APP_INTROSPECT_URL = f"{ROUTER_BASE_URL}/innerApp/oauth2/introspect"
REFRESH_TOKEN_COOKIE_NAME = "refresh_token"





from .models import BodyCustomerServiceCreateCustomer, CreateCustomerOutputSchema, BodyCustomerServiceUpdateCustomerRiskScore, UpdateCustomerRiskScoreOutputSchema, BodyCustomerServiceGetHighRiskCustomers, GetHighRiskCustomersOutputSchema, BodyTransactionMonitoringProcessTransaction, ProcessTransactionOutputSchema, BodyTransactionMonitoringPerformAmlMonitoring, PerformAmlMonitoringOutputSchema, BodyTransactionMonitoringGetSuspiciousTransactions, GetSuspiciousTransactionsOutputSchema, BodyCaseManagementCreateCaseFromAlerts, CreateCaseFromAlertsOutputSchema, BodyCaseManagementAssignCase, AssignCaseOutputSchema, BodyCaseManagementUpdateCaseStatus, UpdateCaseStatusOutputSchema, BodyCaseManagementAddCaseEvidence, AddCaseEvidenceOutputSchema, BodyCaseManagementConductCustomerInterview, ConductCustomerInterviewOutputSchema, BodyCaseManagementCloseCase, CloseCaseOutputSchema, BodyCaseManagementGetAssignedCases, GetAssignedCasesOutputSchema, GetOverdueCasesOutputSchema, BodyReportingServiceCreateStrReport, CreateStrReportOutputSchema, BodyReportingServiceCreateCtrReport, CreateCtrReportOutputSchema, BodyReportingServiceReviewReport, ReviewReportOutputSchema, BodyReportingServiceFileReportWithAuthorities, FileReportWithAuthoritiesOutputSchema, BodyReportingServiceGetPendingReports, GetPendingReportsOutputSchema, BodyReportingServiceGetFiledReports, GetFiledReportsOutputSchema, BodyRulesEngineCreateAmlRule, CreateAmlRuleOutputSchema, BodyRulesEngineTestRuleAgainstHistoricalData, TestRuleAgainstHistoricalDataOutputSchema, BodyRulesEngineActivateRule, ActivateRuleOutputSchema, BodyRulesEngineDeactivateRule, DeactivateRuleOutputSchema, BodyRulesEngineUpdateRuleThresholds, UpdateRuleThresholdsOutputSchema, BodyRulesEngineGetActiveRules, GetActiveRulesOutputSchema, BodyRulesEngineGetRulePerformanceMetrics, GetRulePerformanceMetricsOutputSchema, BodyAuditServiceSearchAuditLogs, SearchAuditLogsOutputSchema, BodyAuditServiceGetUserActivitySummary, GetUserActivitySummaryOutputSchema
from core import customer_service, transaction_monitoring, case_management, reporting_service, rules_engine, audit_service


###############################################################################
# Logging Setup
###############################################################################
import sys
from loguru import logger
from pathlib import Path
from typing import TypeVar
import traceback

def format_record(record):
    fmt = "{level:<5} | {message}"
    if record["exception"] is not None:
        exc_type, exc_value, exc_traceback = record["exception"]        
        tb_lines = traceback.extract_tb(exc_traceback)
        if tb_lines:
            last_frame = tb_lines[-1]
            error_info = (
                f'\nFile "{last_frame.filename}", line {last_frame.lineno}, in {last_frame.name}\n'
                f'  {last_frame.line}\n'
                f'{exc_type.__name__}: {exc_value}'
            )
            record["message"] += error_info
        
        record["exception"] = None
    
    return fmt + "\n"

logger.remove()
logger.add(
    sys.stderr,
    level="DEBUG",
    format=format_record,
    colorize=True
)

Path("../logs").mkdir(exist_ok=True)
logger.add(
    "../logs/fast_api.log",
    rotation="50 MB",
    retention="10 days",
    level="DEBUG",
    format=format_record
)

# need this to capture print statements
class InterceptHandler:
    def write(self, msg):
        if msg.strip():
            logger.info(msg.strip())
    
    def flush(self):
        pass

sys.stdout = InterceptHandler()

T = TypeVar('T')



##############################################################################
# General App
##############################################################################

app = FastAPI(
    title="New app â€” 6/14 @ 3:29 AM",
    docs_url=None
)

###############################################################################
# Simple Request Logging Middleware
###############################################################################

@app.middleware("http")
async def log_requests(request: Request, call_next):
    request_id = str(uuid.uuid4())[:8]
    
    with logger.contextualize(request_id=request_id):
        start_time = datetime.utcnow()
        
        try:
            response = await call_next(request)
            process_time = (datetime.utcnow() - start_time).total_seconds()
            if "HEAD /docs" not in request.url.path:
              logger.info(f"{request.method} {request.url.path} ({response.status_code}) - {process_time:.3f}s")
            return response
        except Exception as e:
            process_time = (datetime.utcnow() - start_time).total_seconds()
            logger.exception(f"{request.method} {request.url.path} - Failed after {process_time:.3f}s")
            raise
            
###############################################################################
# Error Handler
###############################################################################
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Global exception handler for unhandled errors"""
    logger.error(f"Unhandled exception on {request.method} {request.url.path}: {exc}", exc_info=True)
    
    # In production, don't expose error details
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "error": "Internal Server Error",
            "message": "An unexpected error occurred"
        }
    )
    
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """Handle pydantic validation errors"""
    logger.error(f"Validation error on {request.url.path}: {exc.errors()}")
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={
            "error": "Validation Error",
            "message": "Invalid request parameters",
            "details": exc.errors()
        }
    )
    
@app.exception_handler(Exception)
async def handle_errors(request: Request, exc: Exception):
    logger.exception(f"Unhandled error: {type(exc).__name__}: {exc}")
    return JSONResponse(
        status_code=500,
        content={"error": "Internal server error", "message": str(exc)}
    )

@app.exception_handler(RequestValidationError)
async def handle_validation_errors(request: Request, exc: RequestValidationError):
    logger.warning(f"Validation error: {exc.errors()}")
    return JSONResponse(
        status_code=422,
        content={"error": "Validation failed", "details": exc.errors()}
    )

# We need to put a token endpoint here, but we're injecting the token,
# so we'll just put a mock endpoint here.
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="api/mockedTokenEndpoint/")
ENV = os.environ.get("ENV", "deployment")

def get_auth_origins():
    if ENV == "sandbox":
        origins = [
            os.environ.get("SANDBOX_FRONTEND_URL", ""),
            os.environ.get("SANDBOX_BACKEND_URL", ""),
        ]
    else:
        origins = [os.environ.get("PUBLIC_DOMAIN", "")]
    
    return [origin for origin in origins if origin]

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

async def auth_cors_middleware(request: Request, call_next):
    if request.url.path.startswith("/api/auth"):
        auth_origins = get_auth_origins()
        origin = request.headers.get("origin", "")
        response = await call_next(request)
        
        # override the wildcard CORS settings with strict origin checking
        if origin in auth_origins:
            response.headers["Access-Control-Allow-Origin"] = origin
            response.headers["Access-Control-Allow-Credentials"] = "true"
            response.headers["Access-Control-Allow-Methods"] = "GET, POST, OPTIONS"
            response.headers["Access-Control-Allow-Headers"] = "Authorization, Content-Type, Accept"
            response.headers["Access-Control-Expose-Headers"] = "Set-Cookie"
        else:
            # unauthorized origins on auth routes, set CORS headers to blank or remove them
            response.headers["Access-Control-Allow-Origin"] = ""
            response.headers["Access-Control-Allow-Methods"] = ""
            response.headers["Access-Control-Allow-Headers"] = ""
            
        return response
    else:
        return await call_next(request)

# auth-specific middleware and logging middleware
app.middleware("http")(auth_cors_middleware)

# OPTIONS handler for auth endpoints
@app.options("/api/auth/{rest_of_path:path}", include_in_schema=False)
async def auth_options_handler(request: Request):
    auth_origins = get_auth_origins()
    origin = request.headers.get("origin", "")
    response = Response()
    
    if origin in auth_origins:
        response.headers["Access-Control-Allow-Origin"] = origin
        response.headers["Access-Control-Allow-Credentials"] = "true"
        response.headers["Access-Control-Allow-Methods"] = "GET, POST, OPTIONS"
        response.headers["Access-Control-Allow-Headers"] = "Authorization, Content-Type, Accept"
        response.headers["Access-Control-Max-Age"] = "3600"
    
    return response

@app.head("/docs", include_in_schema=False)
async def health_check():
    return {"status": "healthy"}
    
##############################################################################
# Synchronous Function Helpers
##############################################################################

thread_pool = ThreadPoolExecutor(max_workers=4)

async def run_sync_in_thread(func: Callable[..., Any], *args, **kwargs) -> Any:
    """Runs a synchronous function in a thread pool"""
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(
        thread_pool,
        partial(func, *args, **kwargs)
    )


##############################################################################
# Custom Docs
##############################################################################

@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title=app.title + " on Solar",
        swagger_ui_parameters={
            "persistAuthorization": False,
            "syntaxHighlight": {"theme": "obsidian"},
        }
    )

##############################################################################
# Auth Routes
##############################################################################

async def get_current_user(token: str = Depends(oauth2_scheme)):
    try:
        base_url = os.getenv("ROUTER_BASE_URL")
        if not base_url:
            raise HTTPException(status_code=500, detail="ROUTER_BASE_URL is not set, could not authenticate user")
        decoded_token = jwt.decode(token, options={"verify_signature": False})
        token_url = f"{base_url}/innerApp/oauth2/introspect"
        async with httpx.AsyncClient(timeout=20.0) as client:
            response = await client.post(token_url, json={"token": decoded_token["jti"], "token_type_hint": "access_token"})
            if response.status_code != 200 or response.json()["active"] == False:
                raise HTTPException(status_code=401, detail="Unauthorized")
            json_response = response.json()
            user = User(id=json_response["userUuid"], email=json_response["email"])
            return user
    except Exception as e:
        print(f"get_current_user failed with error: {type(e).__name__}")
        raise HTTPException(status_code=401, detail="Unauthorized")

def extract_domain(url):
    if not url:
        return None
    
    # Remove protocol
    if url.startswith("http://"):
        url = url[7:]
    elif url.startswith("https://"):
        url = url[8:]
    
    # Remove trailing slash
    if url.endswith("/"):
        url = url[:-1]
    
    return url

@app.post('/api/auth/token', response_model=TokenResponse, include_in_schema=False)
async def exchange_token(request: Request, body: TokenExchangeRequest = Body(...)):    
    try:
        params = body.model_dump(exclude_none=True)
        if params.get("grant_type") == REFRESH_TOKEN_COOKIE_NAME:
            refresh_token = request.cookies.get(REFRESH_TOKEN_COOKIE_NAME)
            if not refresh_token:
                return JSONResponse(
                    status_code=401,
                    content={
                        "status": "auth_required",
                        "message": "Authentication required",
                        "token_type": "bearer",
                        "access_token": "",
                        "expires_in": 0
                    }
                )

            params[REFRESH_TOKEN_COOKIE_NAME] = refresh_token
        
        if params.get("grant_type") == REFRESH_TOKEN_COOKIE_NAME and params.get(REFRESH_TOKEN_COOKIE_NAME):
            try:
                refresh_token = params[REFRESH_TOKEN_COOKIE_NAME]
                payload = jwt.decode(refresh_token, options={"verify_signature": False})
                
                if payload and payload.get("jti"):
                    params[REFRESH_TOKEN_COOKIE_NAME] = payload["jti"]
            except Exception as e:
                logger.warning(f"Error extracting JTI from refresh token: {e}")

        response = requests.post(
            SOLAR_APP_TOKEN_URL,
            json=params,
            headers={"Content-Type": "application/json", "Accept": "application/json"}
        )
        
        if not response.ok:
            return JSONResponse(
                    status_code=401,
                    content={
                        "status": "auth_required",
                        "message": "Authorization code invalid or expired",
                        "token_type": "bearer",
                        "access_token": "",
                        "expires_in": 0
                    }
                )
        
        tokens = response.json()
        
        if not tokens.get("access_token"):
            raise APIError(message="Received incomplete token data from server")
        
        token_response = TokenResponse(
            access_token=tokens["access_token"],
            token_type=tokens.get("token_type", "bearer"),
            expires_in=tokens.get("expires_in", 3600)
        )
        
        content = token_response.model_dump()
        api_response = JSONResponse(content=content)
        
        if tokens.get(REFRESH_TOKEN_COOKIE_NAME):      
            if ENV == "sandbox" and not os.environ.get("SANDBOX_BACKEND_URL", None):
              raise APIError(message="Token exchange failed: sandbox frontend URL not set")
            
            if ENV == "deployment" and not os.environ.get("PUBLIC_DOMAIN", None):
              raise APIError(message="Token exchange failed: public domain not set")
            
            domain = None
            if ENV == "sandbox":
                domain = extract_domain(os.environ.get("SANDBOX_BACKEND_URL"))
            else:
                domain = extract_domain(os.environ.get("PUBLIC_DOMAIN"))

            api_response.set_cookie(
                key=REFRESH_TOKEN_COOKIE_NAME,
                value=tokens[REFRESH_TOKEN_COOKIE_NAME],
                httponly=True,
                secure=True,
                samesite="none" if ENV == "sandbox" else "strict",
                domain=domain,
                path="/api/auth"
            )
        
        return api_response
        
    except Exception as e:
        logger.error(f"Token exchange error: {str(e)}", exc_info=True)
        raise APIError(message=f"Token exchange failed: {str(e)}")


@app.post('/api/auth/logout', response_model=LogoutResponse, include_in_schema=False)
async def logout():
    response = JSONResponse(content={"success": True})
    
    if ENV == "sandbox" and not os.environ.get("SANDBOX_BACKEND_URL", None):
      raise APIError(message="Logout failed: sandbox frontend URL not set")
    
    if ENV == "deployment" and not os.environ.get("PUBLIC_DOMAIN", None):
      raise APIError(message="Logout failed: public domain not set")
    
    domain = None
    if ENV == "sandbox":
        domain = extract_domain(os.environ.get("SANDBOX_BACKEND_URL"))
    else:
        domain = extract_domain(os.environ.get("PUBLIC_DOMAIN"))
    
    response.delete_cookie(
        key=REFRESH_TOKEN_COOKIE_NAME,
        path="/api/auth",
        secure=True,
        httponly=True,
        samesite="none" if ENV == "sandbox" else "strict",
        domain=domain,
    )
    
    return response


##############################################################################
# Normal Routes
##############################################################################






@app.post('/api/customer_service/create_customer', response_model=CreateCustomerOutputSchema, operation_id='customer_service_create_customer')
async def customer_service_create_customer(body: BodyCustomerServiceCreateCustomer = Body(...), current_user: User = Depends(get_current_user)) -> CreateCustomerOutputSchema:
    response = await run_sync_in_thread(customer_service.create_customer, user=current_user, first_name=body.first_name, last_name=body.last_name, email=body.email, phone=body.phone, date_of_birth=body.date_of_birth, nationality=body.nationality, customer_id=body.customer_id, address_line1=body.address_line1, city=body.city, state=body.state, country=body.country, account_numbers=body.account_numbers, account_types=body.account_types, account_opening_date=body.account_opening_date, bvn=body.bvn, nin=body.nin, address_line2=body.address_line2, postal_code=body.postal_code)
    return response
    
    




@app.post('/api/customer_service/update_customer_risk_score', response_model=UpdateCustomerRiskScoreOutputSchema, operation_id='customer_service_update_customer_risk_score')
async def customer_service_update_customer_risk_score(body: BodyCustomerServiceUpdateCustomerRiskScore = Body(...), current_user: User = Depends(get_current_user)) -> UpdateCustomerRiskScoreOutputSchema:
    response = await run_sync_in_thread(customer_service.update_customer_risk_score, user=current_user, customer_id=body.customer_id)
    return response
    
    




@app.post('/api/customer_service/get_high_risk_customers', response_model=GetHighRiskCustomersOutputSchema, operation_id='customer_service_get_high_risk_customers')
async def customer_service_get_high_risk_customers(body: BodyCustomerServiceGetHighRiskCustomers = Body(...), current_user: User = Depends(get_current_user)) -> GetHighRiskCustomersOutputSchema:
    response = await run_sync_in_thread(customer_service.get_high_risk_customers, user=current_user, limit=body.limit)
    return response
    
    




@app.post('/api/transaction_monitoring/process_transaction', response_model=ProcessTransactionOutputSchema, operation_id='transaction_monitoring_process_transaction')
async def transaction_monitoring_process_transaction(body: BodyTransactionMonitoringProcessTransaction = Body(...), current_user: User = Depends(get_current_user)) -> ProcessTransactionOutputSchema:
    response = await run_sync_in_thread(transaction_monitoring.process_transaction, user=current_user, transaction_id=body.transaction_id, customer_id=body.customer_id, transaction_type=body.transaction_type, amount=body.amount, currency=body.currency, account_number=body.account_number, description=body.description, transaction_method=body.transaction_method, channel=body.channel, beneficiary_name=body.beneficiary_name, beneficiary_account=body.beneficiary_account, beneficiary_bank=body.beneficiary_bank, beneficiary_country=body.beneficiary_country, location=body.location, ip_address=body.ip_address, device_id=body.device_id)
    return response
    
    




@app.post('/api/transaction_monitoring/perform_aml_monitoring', response_model=PerformAmlMonitoringOutputSchema, operation_id='transaction_monitoring_perform_aml_monitoring')
async def transaction_monitoring_perform_aml_monitoring(body: BodyTransactionMonitoringPerformAmlMonitoring = Body(...), current_user: User = Depends(get_current_user)) -> PerformAmlMonitoringOutputSchema:
    response = await run_sync_in_thread(transaction_monitoring.perform_aml_monitoring, user=current_user, transaction=body.transaction)
    return response
    
    




@app.post('/api/transaction_monitoring/get_suspicious_transactions', response_model=GetSuspiciousTransactionsOutputSchema, operation_id='transaction_monitoring_get_suspicious_transactions')
async def transaction_monitoring_get_suspicious_transactions(body: BodyTransactionMonitoringGetSuspiciousTransactions = Body(...), current_user: User = Depends(get_current_user)) -> GetSuspiciousTransactionsOutputSchema:
    response = await run_sync_in_thread(transaction_monitoring.get_suspicious_transactions, user=current_user, days=body.days, limit=body.limit)
    return response
    
    




@app.post('/api/case_management/create_case_from_alerts', response_model=CreateCaseFromAlertsOutputSchema, operation_id='case_management_create_case_from_alerts')
async def case_management_create_case_from_alerts(body: BodyCaseManagementCreateCaseFromAlerts = Body(...), current_user: User = Depends(get_current_user)) -> CreateCaseFromAlertsOutputSchema:
    response = await run_sync_in_thread(case_management.create_case_from_alerts, user=current_user, alert_ids=body.alert_ids, case_type=body.case_type, title=body.title, description=body.description, priority=body.priority)
    return response
    
    




@app.post('/api/case_management/assign_case', response_model=AssignCaseOutputSchema, operation_id='case_management_assign_case')
async def case_management_assign_case(body: BodyCaseManagementAssignCase = Body(...), current_user: User = Depends(get_current_user)) -> AssignCaseOutputSchema:
    response = await run_sync_in_thread(case_management.assign_case, user=current_user, case_id=body.case_id, assigned_to=body.assigned_to, notes=body.notes)
    return response
    
    




@app.post('/api/case_management/update_case_status', response_model=UpdateCaseStatusOutputSchema, operation_id='case_management_update_case_status')
async def case_management_update_case_status(body: BodyCaseManagementUpdateCaseStatus = Body(...), current_user: User = Depends(get_current_user)) -> UpdateCaseStatusOutputSchema:
    response = await run_sync_in_thread(case_management.update_case_status, user=current_user, case_id=body.case_id, new_status=body.new_status, notes=body.notes)
    return response
    
    




@app.post('/api/case_management/add_case_evidence', response_model=AddCaseEvidenceOutputSchema, operation_id='case_management_add_case_evidence')
async def case_management_add_case_evidence(body: BodyCaseManagementAddCaseEvidence = Body(...), current_user: User = Depends(get_current_user)) -> AddCaseEvidenceOutputSchema:
    response = await run_sync_in_thread(case_management.add_case_evidence, user=current_user, case_id=body.case_id, evidence_type=body.evidence_type, evidence_description=body.evidence_description, evidence_data=body.evidence_data)
    return response
    
    




@app.post('/api/case_management/conduct_customer_interview', response_model=ConductCustomerInterviewOutputSchema, operation_id='case_management_conduct_customer_interview')
async def case_management_conduct_customer_interview(body: BodyCaseManagementConductCustomerInterview = Body(...), current_user: User = Depends(get_current_user)) -> ConductCustomerInterviewOutputSchema:
    response = await run_sync_in_thread(case_management.conduct_customer_interview, user=current_user, case_id=body.case_id, customer_id=body.customer_id, interview_method=body.interview_method, interview_notes=body.interview_notes, outcome=body.outcome)
    return response
    
    




@app.post('/api/case_management/close_case', response_model=CloseCaseOutputSchema, operation_id='case_management_close_case')
async def case_management_close_case(body: BodyCaseManagementCloseCase = Body(...), current_user: User = Depends(get_current_user)) -> CloseCaseOutputSchema:
    response = await run_sync_in_thread(case_management.close_case, user=current_user, case_id=body.case_id, closure_reason=body.closure_reason, closure_notes=body.closure_notes, decision=body.decision, actions_taken=body.actions_taken)
    return response
    
    




@app.post('/api/case_management/get_assigned_cases', response_model=GetAssignedCasesOutputSchema, operation_id='case_management_get_assigned_cases')
async def case_management_get_assigned_cases(body: BodyCaseManagementGetAssignedCases = Body(...), current_user: User = Depends(get_current_user)) -> GetAssignedCasesOutputSchema:
    response = await run_sync_in_thread(case_management.get_assigned_cases, user=current_user, status=body.status)
    return response
    
    




@app.post('/api/case_management/get_overdue_cases', response_model=GetOverdueCasesOutputSchema, operation_id='case_management_get_overdue_cases')
async def case_management_get_overdue_cases(current_user: User = Depends(get_current_user)) -> GetOverdueCasesOutputSchema:
    response = await run_sync_in_thread(case_management.get_overdue_cases, user=current_user)
    return response
    
    




@app.post('/api/reporting_service/create_str_report', response_model=CreateStrReportOutputSchema, operation_id='reporting_service_create_str_report')
async def reporting_service_create_str_report(body: BodyReportingServiceCreateStrReport = Body(...), current_user: User = Depends(get_current_user)) -> CreateStrReportOutputSchema:
    response = await run_sync_in_thread(reporting_service.create_str_report, user=current_user, case_id=body.case_id, narrative=body.narrative, suspicious_activity_type=body.suspicious_activity_type, activity_description=body.activity_description, timeline_of_events=body.timeline_of_events, incident_date_from=body.incident_date_from, incident_date_to=body.incident_date_to)
    return response
    
    




@app.post('/api/reporting_service/create_ctr_report', response_model=CreateCtrReportOutputSchema, operation_id='reporting_service_create_ctr_report')
async def reporting_service_create_ctr_report(body: BodyReportingServiceCreateCtrReport = Body(...), current_user: User = Depends(get_current_user)) -> CreateCtrReportOutputSchema:
    response = await run_sync_in_thread(reporting_service.create_ctr_report, user=current_user, customer_id=body.customer_id, transaction_ids=body.transaction_ids, reporting_period_start=body.reporting_period_start, reporting_period_end=body.reporting_period_end)
    return response
    
    




@app.post('/api/reporting_service/review_report', response_model=ReviewReportOutputSchema, operation_id='reporting_service_review_report')
async def reporting_service_review_report(body: BodyReportingServiceReviewReport = Body(...), current_user: User = Depends(get_current_user)) -> ReviewReportOutputSchema:
    response = await run_sync_in_thread(reporting_service.review_report, user=current_user, report_id=body.report_id, review_notes=body.review_notes, approved=body.approved)
    return response
    
    




@app.post('/api/reporting_service/file_report_with_authorities', response_model=FileReportWithAuthoritiesOutputSchema, operation_id='reporting_service_file_report_with_authorities')
async def reporting_service_file_report_with_authorities(body: BodyReportingServiceFileReportWithAuthorities = Body(...), current_user: User = Depends(get_current_user)) -> FileReportWithAuthoritiesOutputSchema:
    response = await run_sync_in_thread(reporting_service.file_report_with_authorities, user=current_user, report_id=body.report_id, filing_method=body.filing_method)
    return response
    
    




@app.post('/api/reporting_service/get_pending_reports', response_model=GetPendingReportsOutputSchema, operation_id='reporting_service_get_pending_reports')
async def reporting_service_get_pending_reports(body: BodyReportingServiceGetPendingReports = Body(...), current_user: User = Depends(get_current_user)) -> GetPendingReportsOutputSchema:
    response = await run_sync_in_thread(reporting_service.get_pending_reports, user=current_user, report_type=body.report_type)
    return response
    
    




@app.post('/api/reporting_service/get_filed_reports', response_model=GetFiledReportsOutputSchema, operation_id='reporting_service_get_filed_reports')
async def reporting_service_get_filed_reports(body: BodyReportingServiceGetFiledReports = Body(...), current_user: User = Depends(get_current_user)) -> GetFiledReportsOutputSchema:
    response = await run_sync_in_thread(reporting_service.get_filed_reports, user=current_user, days=body.days)
    return response
    
    




@app.post('/api/rules_engine/create_aml_rule', response_model=CreateAmlRuleOutputSchema, operation_id='rules_engine_create_aml_rule')
async def rules_engine_create_aml_rule(body: BodyRulesEngineCreateAmlRule = Body(...), current_user: User = Depends(get_current_user)) -> CreateAmlRuleOutputSchema:
    response = await run_sync_in_thread(rules_engine.create_aml_rule, user=current_user, rule_name=body.rule_name, rule_code=body.rule_code, rule_type=body.rule_type, category=body.category, description=body.description, business_justification=body.business_justification, conditions=body.conditions, thresholds=body.thresholds, applies_to=body.applies_to, customer_segments=body.customer_segments, transaction_types=body.transaction_types, channels=body.channels, risk_weight=body.risk_weight, severity_level=body.severity_level, alert_priority=body.alert_priority, regulatory_reference=body.regulatory_reference)
    return response
    
    




@app.post('/api/rules_engine/test_rule_against_historical_data', response_model=TestRuleAgainstHistoricalDataOutputSchema, operation_id='rules_engine_test_rule_against_historical_data')
async def rules_engine_test_rule_against_historical_data(body: BodyRulesEngineTestRuleAgainstHistoricalData = Body(...), current_user: User = Depends(get_current_user)) -> TestRuleAgainstHistoricalDataOutputSchema:
    response = await run_sync_in_thread(rules_engine.test_rule_against_historical_data, user=current_user, rule_id=body.rule_id, test_period_days=body.test_period_days)
    return response
    
    




@app.post('/api/rules_engine/activate_rule', response_model=ActivateRuleOutputSchema, operation_id='rules_engine_activate_rule')
async def rules_engine_activate_rule(body: BodyRulesEngineActivateRule = Body(...), current_user: User = Depends(get_current_user)) -> ActivateRuleOutputSchema:
    response = await run_sync_in_thread(rules_engine.activate_rule, user=current_user, rule_id=body.rule_id)
    return response
    
    




@app.post('/api/rules_engine/deactivate_rule', response_model=DeactivateRuleOutputSchema, operation_id='rules_engine_deactivate_rule')
async def rules_engine_deactivate_rule(body: BodyRulesEngineDeactivateRule = Body(...), current_user: User = Depends(get_current_user)) -> DeactivateRuleOutputSchema:
    response = await run_sync_in_thread(rules_engine.deactivate_rule, user=current_user, rule_id=body.rule_id, reason=body.reason)
    return response
    
    




@app.post('/api/rules_engine/update_rule_thresholds', response_model=UpdateRuleThresholdsOutputSchema, operation_id='rules_engine_update_rule_thresholds')
async def rules_engine_update_rule_thresholds(body: BodyRulesEngineUpdateRuleThresholds = Body(...), current_user: User = Depends(get_current_user)) -> UpdateRuleThresholdsOutputSchema:
    response = await run_sync_in_thread(rules_engine.update_rule_thresholds, user=current_user, rule_id=body.rule_id, new_thresholds=body.new_thresholds, reason=body.reason)
    return response
    
    




@app.post('/api/rules_engine/get_active_rules', response_model=GetActiveRulesOutputSchema, operation_id='rules_engine_get_active_rules')
async def rules_engine_get_active_rules(body: BodyRulesEngineGetActiveRules = Body(...), current_user: User = Depends(get_current_user)) -> GetActiveRulesOutputSchema:
    response = await run_sync_in_thread(rules_engine.get_active_rules, user=current_user, rule_type=body.rule_type)
    return response
    
    




@app.post('/api/rules_engine/get_rule_performance_metrics', response_model=GetRulePerformanceMetricsOutputSchema, operation_id='rules_engine_get_rule_performance_metrics')
async def rules_engine_get_rule_performance_metrics(body: BodyRulesEngineGetRulePerformanceMetrics = Body(...), current_user: User = Depends(get_current_user)) -> GetRulePerformanceMetricsOutputSchema:
    response = await run_sync_in_thread(rules_engine.get_rule_performance_metrics, user=current_user, rule_id=body.rule_id, days=body.days)
    return response
    
    




@app.post('/api/audit_service/search_audit_logs', response_model=SearchAuditLogsOutputSchema, operation_id='audit_service_search_audit_logs')
async def audit_service_search_audit_logs(body: BodyAuditServiceSearchAuditLogs = Body(...), current_user: User = Depends(get_current_user)) -> SearchAuditLogsOutputSchema:
    response = await run_sync_in_thread(audit_service.search_audit_logs, user=current_user, start_date=body.start_date, end_date=body.end_date, event_type=body.event_type, event_category=body.event_category, user_email=body.user_email, resource_type=body.resource_type, resource_id=body.resource_id, action=body.action, limit=body.limit)
    return response
    
    




@app.post('/api/audit_service/get_user_activity_summary', response_model=GetUserActivitySummaryOutputSchema, operation_id='audit_service_get_user_activity_summary')
async def audit_service_get_user_activity_summary(body: BodyAuditServiceGetUserActivitySummary = Body(...), current_user: User = Depends(get_current_user)) -> GetUserActivitySummaryOutputSchema:
    response = await run_sync_in_thread(audit_service.get_user_activity_summary, user=current_user, target_user_id=body.target_user_id, days=body.days)
    return response
    
    

