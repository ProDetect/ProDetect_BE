# Auto-generated by Lumenary
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Union, Literal, Annotated, Tuple, Set, Any

from datetime import datetime, date, time, timedelta
from uuid import UUID
import uuid

class TokenExchangeRequest(BaseModel):
    client_id: str
    grant_type: str
    code: Optional[str] = None
    code_verifier: Optional[str] = None

class TokenResponse(BaseModel):
    access_token: str
    token_type: str = "bearer"
    expires_in: int = 3600

class TokenValidationRequest(BaseModel):
    token: str
    
class LogoutResponse(BaseModel):
    success: bool = True

# Import user-defined models that we need for input/response models
from core.customer import Customer
from core.transaction import Transaction
from core.alert import Alert
from core.case import Case
from core.rule import Rule
from core.report import Report
from core.audit_log import AuditLog
from core.user import User

class BodyCustomerServiceCreateCustomer(BaseModel):
  first_name: str
  last_name: str
  email: str
  phone: str
  date_of_birth: datetime
  nationality: str
  customer_id: str
  address_line1: str
  city: str
  state: str
  country: str
  account_numbers: List[str]
  account_types: List[str]
  account_opening_date: datetime
  bvn: Optional[str] = None
  nin: Optional[str] = None
  address_line2: Optional[str] = None
  postal_code: Optional[str] = None

CreateCustomerOutputSchema = Customer
class BodyCustomerServiceUpdateCustomerRiskScore(BaseModel):
  customer_id: uuid.UUID

UpdateCustomerRiskScoreOutputSchema = Customer
class BodyCustomerServiceGetHighRiskCustomers(BaseModel):
  limit: int

GetHighRiskCustomersOutputSchema = List[Customer]
class BodyTransactionMonitoringProcessTransaction(BaseModel):
  transaction_id: str
  customer_id: uuid.UUID
  transaction_type: str
  amount: float
  currency: str
  account_number: str
  description: str
  transaction_method: str
  channel: str
  beneficiary_name: Optional[str] = None
  beneficiary_account: Optional[str] = None
  beneficiary_bank: Optional[str] = None
  beneficiary_country: Optional[str] = None
  location: Optional[str] = None
  ip_address: Optional[str] = None
  device_id: Optional[str] = None

ProcessTransactionOutputSchema = Transaction
class BodyTransactionMonitoringPerformAmlMonitoring(BaseModel):
  transaction: Transaction

PerformAmlMonitoringOutputSchema = Dict[str, Any]
class BodyTransactionMonitoringGetSuspiciousTransactions(BaseModel):
  days: int
  limit: int

GetSuspiciousTransactionsOutputSchema = List[Transaction]
class BodyCaseManagementCreateCaseFromAlerts(BaseModel):
  alert_ids: List[uuid.UUID]
  case_type: str
  title: str
  description: str
  priority: int

CreateCaseFromAlertsOutputSchema = Case
class BodyCaseManagementAssignCase(BaseModel):
  case_id: uuid.UUID
  assigned_to: uuid.UUID
  notes: Optional[str] = None

AssignCaseOutputSchema = Case
class BodyCaseManagementUpdateCaseStatus(BaseModel):
  case_id: uuid.UUID
  new_status: str
  notes: Optional[str] = None

UpdateCaseStatusOutputSchema = Case
class BodyCaseManagementAddCaseEvidence(BaseModel):
  case_id: uuid.UUID
  evidence_type: str
  evidence_description: str
  evidence_data: Dict[str, Any]

AddCaseEvidenceOutputSchema = Case
class BodyCaseManagementConductCustomerInterview(BaseModel):
  case_id: uuid.UUID
  customer_id: uuid.UUID
  interview_method: str
  interview_notes: str
  outcome: str

ConductCustomerInterviewOutputSchema = Case
class BodyCaseManagementCloseCase(BaseModel):
  case_id: uuid.UUID
  closure_reason: str
  closure_notes: str
  decision: str
  actions_taken: List[str]

CloseCaseOutputSchema = Case
class BodyCaseManagementGetAssignedCases(BaseModel):
  status: Optional[str] = None

GetAssignedCasesOutputSchema = List[Case]
GetOverdueCasesOutputSchema = List[Case]
class BodyReportingServiceCreateStrReport(BaseModel):
  case_id: uuid.UUID
  narrative: str
  suspicious_activity_type: str
  activity_description: str
  timeline_of_events: str
  incident_date_from: datetime
  incident_date_to: datetime

CreateStrReportOutputSchema = Report
class BodyReportingServiceCreateCtrReport(BaseModel):
  customer_id: uuid.UUID
  transaction_ids: List[uuid.UUID]
  reporting_period_start: datetime
  reporting_period_end: datetime

CreateCtrReportOutputSchema = Report
class BodyReportingServiceReviewReport(BaseModel):
  report_id: uuid.UUID
  review_notes: str
  approved: bool

ReviewReportOutputSchema = Report
class BodyReportingServiceFileReportWithAuthorities(BaseModel):
  report_id: uuid.UUID
  filing_method: str

FileReportWithAuthoritiesOutputSchema = Report
class BodyReportingServiceGetPendingReports(BaseModel):
  report_type: Optional[str] = None

GetPendingReportsOutputSchema = List[Report]
class BodyReportingServiceGetFiledReports(BaseModel):
  days: int

GetFiledReportsOutputSchema = List[Report]
class BodyRulesEngineCreateAmlRule(BaseModel):
  rule_name: str
  rule_code: str
  rule_type: str
  category: str
  description: str
  business_justification: str
  conditions: Dict[str, Any]
  thresholds: Dict[str, Any]
  applies_to: str
  customer_segments: Optional[List[str]] = None
  transaction_types: Optional[List[str]] = None
  channels: Optional[List[str]] = None
  risk_weight: float
  severity_level: str
  alert_priority: int
  regulatory_reference: Optional[str] = None

CreateAmlRuleOutputSchema = Rule
class BodyRulesEngineTestRuleAgainstHistoricalData(BaseModel):
  rule_id: uuid.UUID
  test_period_days: int

TestRuleAgainstHistoricalDataOutputSchema = Dict[str, Any]
class BodyRulesEngineActivateRule(BaseModel):
  rule_id: uuid.UUID

ActivateRuleOutputSchema = Rule
class BodyRulesEngineDeactivateRule(BaseModel):
  rule_id: uuid.UUID
  reason: str

DeactivateRuleOutputSchema = Rule
class BodyRulesEngineUpdateRuleThresholds(BaseModel):
  rule_id: uuid.UUID
  new_thresholds: Dict[str, Any]
  reason: str

UpdateRuleThresholdsOutputSchema = Rule
class BodyRulesEngineGetActiveRules(BaseModel):
  rule_type: Optional[str] = None

GetActiveRulesOutputSchema = List[Rule]
class BodyRulesEngineGetRulePerformanceMetrics(BaseModel):
  rule_id: uuid.UUID
  days: int

GetRulePerformanceMetricsOutputSchema = Dict[str, Any]
class BodyAuditServiceSearchAuditLogs(BaseModel):
  start_date: Optional[datetime] = None
  end_date: Optional[datetime] = None
  event_type: Optional[str] = None
  event_category: Optional[str] = None
  user_email: Optional[str] = None
  resource_type: Optional[str] = None
  resource_id: Optional[uuid.UUID] = None
  action: Optional[str] = None
  limit: int

SearchAuditLogsOutputSchema = List[AuditLog]
class BodyAuditServiceGetUserActivitySummary(BaseModel):
  target_user_id: uuid.UUID
  days: int

GetUserActivitySummaryOutputSchema = Dict[str, Any]
    