import { Search, ListFilter, TriangleAlert, TrendingUp, Activity, Eye, Flag, Clock, CircleCheck } from "lucide-react";
import { useEffect, useState } from 'react';\nimport Layout from './Layout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\n\nimport { transactionMonitoringGetSuspiciousTransactions } from '@/lib/sdk';\nimport type { Transaction } from '@/lib/sdk';\n\nexport default function TransactionMonitoring() {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [riskFilter, setRiskFilter] = useState('all');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  useEffect(() => {\n    loadSuspiciousTransactions();\n  }, []);\n\n  const loadSuspiciousTransactions = async () => {\n    try {\n      setLoading(true);\n      const response = await transactionMonitoringGetSuspiciousTransactions({\n        body: { days: 7, limit: 100 }\n      });\n      \n      if (response.data) {\n        setTransactions(response.data);\n      }\n    } catch (error) {\n      console.error('Failed to load suspicious transactions:', error);\n      // Mock data for demo\n      setTransactions([\n        {\n          id: '1',\n          transaction_id: 'TXN001',\n          reference_number: 'REF-20241214-ABC123',\n          customer_id: 'cust-001',\n          transaction_type: 'transfer',\n          amount: 15000000,\n          currency: 'NGN',\n          account_number: '1234567890',\n          description: 'Business payment',\n          transaction_date: new Date().toISOString(),\n          value_date: new Date().toISOString(),\n          processing_date: new Date().toISOString(),\n          status: 'completed',\n          risk_score: 85,\n          is_suspicious: true,\n          alert_count: 2,\n          structuring_indicator: false,\n          velocity_flag: true,\n          amount_threshold_flag: true,\n          unusual_pattern_flag: false,\n          above_ctr_threshold: true,\n          cross_border: false,\n          cash_transaction: false,\n          transaction_method: 'mobile',\n          channel: 'mobile_app',\n          risk_flags: { velocity: true, amount_threshold: true },\n          metadata: {},\n          external_data: {},\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        },\n        {\n          id: '2',\n          transaction_id: 'TXN002',\n          reference_number: 'REF-20241214-DEF456',\n          customer_id: 'cust-002',\n          transaction_type: 'withdrawal',\n          amount: 8500000,\n          currency: 'NGN',\n          account_number: '0987654321',\n          description: 'Cash withdrawal',\n          transaction_date: new Date(Date.now() - 3600000).toISOString(),\n          value_date: new Date(Date.now() - 3600000).toISOString(),\n          processing_date: new Date(Date.now() - 3600000).toISOString(),\n          status: 'completed',\n          risk_score: 72,\n          is_suspicious: true,\n          alert_count: 1,\n          structuring_indicator: true,\n          velocity_flag: false,\n          amount_threshold_flag: true,\n          unusual_pattern_flag: true,\n          above_ctr_threshold: true,\n          cross_border: false,\n          cash_transaction: true,\n          transaction_method: 'atm',\n          channel: 'atm',\n          risk_flags: { structuring: true, unusual_pattern: true },\n          metadata: {},\n          external_data: {},\n          created_at: new Date(Date.now() - 3600000).toISOString(),\n          updated_at: new Date(Date.now() - 3600000).toISOString()\n        }\n      ]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getRiskBadgeColor = (score: number) => {\n    if (score >= 80) return 'destructive';\n    if (score >= 60) return 'default';\n    if (score >= 40) return 'secondary';\n    return 'outline';\n  };\n\n  const getRiskLevel = (score: number) => {\n    if (score >= 80) return 'Critical';\n    if (score >= 60) return 'High';\n    if (score >= 40) return 'Medium';\n    return 'Low';\n  };\n\n  const formatAmount = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('en-NG', {\n      style: 'currency',\n      currency: currency || 'NGN',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const formatDateTime = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  const filteredTransactions = transactions.filter(transaction => {\n    const matchesSearch = \n      transaction.transaction_id?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      transaction.reference_number?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      transaction.account_number?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesRisk = riskFilter === 'all' || \n      (riskFilter === 'critical' && (transaction.risk_score || 0) >= 80) ||\n      (riskFilter === 'high' && (transaction.risk_score || 0) >= 60 && (transaction.risk_score || 0) < 80) ||\n      (riskFilter === 'medium' && (transaction.risk_score || 0) >= 40 && (transaction.risk_score || 0) < 60) ||\n      (riskFilter === 'low' && (transaction.risk_score || 0) < 40);\n    \n    const matchesStatus = statusFilter === 'all' || transaction.status === statusFilter;\n    \n    return matchesSearch && matchesRisk && matchesStatus;\n  });\n\n  const stats = {\n    totalSuspicious: transactions.length,\n    highRisk: transactions.filter(t => (t.risk_score || 0) >= 60).length,\n    pending: transactions.filter(t => t.status === 'pending').length,\n    avgRiskScore: transactions.length > 0 \n      ? Math.round(transactions.reduce((sum, t) => sum + (t.risk_score || 0), 0) / transactions.length)\n      : 0\n  };\n\n  return (\n    <Layout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-gray-900\">Transaction Monitoring</h2>\n            <p className=\"text-gray-600 mt-1\">Real-time suspicious transaction detection and analysis</p>\n          </div>\n          <Button onClick={loadSuspiciousTransactions} disabled={loading}>\n            {loading ? 'Loading...' : 'Refresh'}\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Suspicious Transactions</CardTitle>\n              <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.totalSuspicious}</div>\n              <p className=\"text-xs text-muted-foreground\">Last 7 days</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">High Risk</CardTitle>\n              <Flag className=\"h-4 w-4 text-red-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.highRisk}</div>\n              <p className=\"text-xs text-muted-foreground\">Requiring immediate attention</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending Review</CardTitle>\n              <Clock className=\"h-4 w-4 text-blue-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.pending}</div>\n              <p className=\"text-xs text-muted-foreground\">Awaiting investigation</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Avg Risk Score</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-purple-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.avgRiskScore}</div>\n              <p className=\"text-xs text-muted-foreground\">Out of 100</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Filter Transactions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search by transaction ID, reference, or account...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <Select value={riskFilter} onValueChange={setRiskFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Risk Level\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Risk Levels</SelectItem>\n                  <SelectItem value=\"critical\">Critical (80+)</SelectItem>\n                  <SelectItem value=\"high\">High (60-79)</SelectItem>\n                  <SelectItem value=\"medium\">Medium (40-59)</SelectItem>\n                  <SelectItem value=\"low\">Low (0-39)</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"failed\">Failed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Transaction Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Suspicious Transactions</CardTitle>\n            <CardDescription>\n              {filteredTransactions.length} transactions found\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Transaction ID</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Risk Score</TableHead>\n                  <TableHead>Flags</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredTransactions.map((transaction) => (\n                  <TableRow key={transaction.id}>\n                    <TableCell className=\"font-medium\">\n                      {transaction.transaction_id}\n                    </TableCell>\n                    <TableCell>\n                      {formatAmount(transaction.amount, transaction.currency || 'NGN')}\n                    </TableCell>\n                    <TableCell className=\"capitalize\">\n                      {transaction.transaction_type}\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={getRiskBadgeColor(transaction.risk_score || 0)}>\n                        {transaction.risk_score || 0} - {getRiskLevel(transaction.risk_score || 0)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {transaction.velocity_flag && (\n                          <Badge variant=\"outline\" className=\"text-xs\">Velocity</Badge>\n                        )}\n                        {transaction.amount_threshold_flag && (\n                          <Badge variant=\"outline\" className=\"text-xs\">Amount</Badge>\n                        )}\n                        {transaction.structuring_indicator && (\n                          <Badge variant=\"outline\" className=\"text-xs\">Structuring</Badge>\n                        )}\n                        {transaction.unusual_pattern_flag && (\n                          <Badge variant=\"outline\" className=\"text-xs\">Pattern</Badge>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {formatDateTime(transaction.transaction_date)}\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={transaction.status === 'completed' ? 'default' : 'secondary'}>\n                        {transaction.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Dialog open={dialogOpen && selectedTransaction?.id === transaction.id} onOpenChange={setDialogOpen}>\n                        <DialogTrigger asChild>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedTransaction(transaction);\n                              setDialogOpen(true);\n                            }}\n                          >\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-2xl\">\n                          <DialogHeader>\n                            <DialogTitle>Transaction Details</DialogTitle>\n                            <DialogDescription>\n                              {transaction.transaction_id} - Risk Analysis\n                            </DialogDescription>\n                          </DialogHeader>\n                          \n                          {selectedTransaction && (\n                            <div className=\"space-y-4\">\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <div>\n                                  <h4 className=\"font-semibold mb-2\">Transaction Info</h4>\n                                  <div className=\"space-y-2 text-sm\">\n                                    <div><strong>ID:</strong> {selectedTransaction.transaction_id}</div>\n                                    <div><strong>Reference:</strong> {selectedTransaction.reference_number}</div>\n                                    <div><strong>Amount:</strong> {formatAmount(selectedTransaction.amount, selectedTransaction.currency || 'NGN')}</div>\n                                    <div><strong>Type:</strong> {selectedTransaction.transaction_type}</div>\n                                    <div><strong>Method:</strong> {selectedTransaction.transaction_method}</div>\n                                    <div><strong>Channel:</strong> {selectedTransaction.channel}</div>\n                                  </div>\n                                </div>\n                                \n                                <div>\n                                  <h4 className=\"font-semibold mb-2\">Risk Assessment</h4>\n                                  <div className=\"space-y-2 text-sm\">\n                                    <div><strong>Risk Score:</strong> \n                                      <Badge className=\"ml-2\" variant={getRiskBadgeColor(selectedTransaction.risk_score || 0)}>\n                                        {selectedTransaction.risk_score || 0}\n                                      </Badge>\n                                    </div>\n                                    <div><strong>Alert Count:</strong> {selectedTransaction.alert_count || 0}</div>\n                                    <div><strong>CTR Threshold:</strong> {selectedTransaction.above_ctr_threshold ? 'Yes' : 'No'}</div>\n                                    <div><strong>Cross Border:</strong> {selectedTransaction.cross_border ? 'Yes' : 'No'}</div>\n                                    <div><strong>Cash Transaction:</strong> {selectedTransaction.cash_transaction ? 'Yes' : 'No'}</div>\n                                  </div>\n                                </div>\n                              </div>\n                              \n                              <div>\n                                <h4 className=\"font-semibold mb-2\">Risk Flags</h4>\n                                <div className=\"flex flex-wrap gap-2\">\n                                  {selectedTransaction.velocity_flag && (\n                                    <Badge variant=\"destructive\">High Velocity</Badge>\n                                  )}\n                                  {selectedTransaction.amount_threshold_flag && (\n                                    <Badge variant=\"destructive\">Amount Threshold</Badge>\n                                  )}\n                                  {selectedTransaction.structuring_indicator && (\n                                    <Badge variant=\"destructive\">Structuring Pattern</Badge>\n                                  )}\n                                  {selectedTransaction.unusual_pattern_flag && (\n                                    <Badge variant=\"destructive\">Unusual Pattern</Badge>\n                                  )}\n                                </div>\n                              </div>\n                              \n                              <div className=\"flex justify-end space-x-2\">\n                                <Button variant=\"outline\" onClick={() => setDialogOpen(false)}>\n                                  Close\n                                </Button>\n                                <Button>Create Alert</Button>\n                              </div>\n                            </div>\n                          )}\n                        </DialogContent>\n                      </Dialog>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n            \n            {filteredTransactions.length === 0 && !loading && (\n              <div className=\"text-center py-8 text-gray-500\">\n                No transactions found matching your criteria.\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}