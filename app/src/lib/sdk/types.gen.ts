// This file is auto-generated by @hey-api/openapi-ts

export type AuditLog = {
    id?: string;
    event_id: string;
    event_type: string;
    event_category: string;
    user_id?: string | null;
    user_email?: string | null;
    user_role?: string | null;
    impersonated_by?: string | null;
    action: string;
    resource_type: string;
    resource_id?: string | null;
    resource_identifier?: string | null;
    description: string;
    details?: {
        [key: string]: unknown;
    };
    ip_address?: string | null;
    user_agent?: string | null;
    session_id?: string | null;
    request_id?: string | null;
    old_values?: {
        [key: string]: unknown;
    } | null;
    new_values?: {
        [key: string]: unknown;
    } | null;
    changed_fields?: {
        [key: string]: unknown;
    } | null;
    risk_score?: number | null;
    security_flags?: {
        [key: string]: unknown;
    } | null;
    suspicious_activity?: boolean;
    regulatory_significance?: boolean;
    retention_period?: number;
    data_classification?: string;
    processing_time?: number | null;
    status?: string;
    error_message?: string | null;
    error_code?: string | null;
    country?: string | null;
    region?: string | null;
    timezone?: string | null;
    workflow_id?: string | null;
    workflow_step?: string | null;
    parent_event_id?: string | null;
    data_accessed?: {
        [key: string]: unknown;
    } | null;
    export_format?: string | null;
    records_affected?: number | null;
    timestamp?: string;
    event_date?: string;
    tags?: {
        [key: string]: unknown;
    } | null;
    correlation_id?: string | null;
    application_version?: string | null;
    environment?: string;
    server_name?: string | null;
    requires_review?: boolean;
    reviewed?: boolean;
    reviewed_by?: string | null;
    review_date?: string | null;
    review_notes?: string | null;
};

export type BodyAuditServiceGetUserActivitySummary = {
    target_user_id: string;
    days: number;
};

export type BodyAuditServiceSearchAuditLogs = {
    start_date?: string | null;
    end_date?: string | null;
    event_type?: string | null;
    event_category?: string | null;
    user_email?: string | null;
    resource_type?: string | null;
    resource_id?: string | null;
    action?: string | null;
    limit: number;
};

export type BodyCaseManagementAddCaseEvidence = {
    case_id: string;
    evidence_type: string;
    evidence_description: string;
    evidence_data: {
        [key: string]: unknown;
    };
};

export type BodyCaseManagementAssignCase = {
    case_id: string;
    assigned_to: string;
    notes?: string | null;
};

export type BodyCaseManagementCloseCase = {
    case_id: string;
    closure_reason: string;
    closure_notes: string;
    decision: string;
    actions_taken: Array<string>;
};

export type BodyCaseManagementConductCustomerInterview = {
    case_id: string;
    customer_id: string;
    interview_method: string;
    interview_notes: string;
    outcome: string;
};

export type BodyCaseManagementCreateCaseFromAlerts = {
    alert_ids: Array<string>;
    case_type: string;
    title: string;
    description: string;
    priority: number;
};

export type BodyCaseManagementGetAssignedCases = {
    status?: string | null;
};

export type BodyCaseManagementUpdateCaseStatus = {
    case_id: string;
    new_status: string;
    notes?: string | null;
};

export type BodyCustomerServiceCreateCustomer = {
    first_name: string;
    last_name: string;
    email: string;
    phone: string;
    date_of_birth: string;
    nationality: string;
    customer_id: string;
    address_line1: string;
    city: string;
    state: string;
    country: string;
    account_numbers: Array<string>;
    account_types: Array<string>;
    account_opening_date: string;
    bvn?: string | null;
    nin?: string | null;
    address_line2?: string | null;
    postal_code?: string | null;
};

export type BodyCustomerServiceGetHighRiskCustomers = {
    limit: number;
};

export type BodyCustomerServiceUpdateCustomerRiskScore = {
    customer_id: string;
};

export type BodyReportingServiceCreateCtrReport = {
    customer_id: string;
    transaction_ids: Array<string>;
    reporting_period_start: string;
    reporting_period_end: string;
};

export type BodyReportingServiceCreateStrReport = {
    case_id: string;
    narrative: string;
    suspicious_activity_type: string;
    activity_description: string;
    timeline_of_events: string;
    incident_date_from: string;
    incident_date_to: string;
};

export type BodyReportingServiceFileReportWithAuthorities = {
    report_id: string;
    filing_method: string;
};

export type BodyReportingServiceGetFiledReports = {
    days: number;
};

export type BodyReportingServiceGetPendingReports = {
    report_type?: string | null;
};

export type BodyReportingServiceReviewReport = {
    report_id: string;
    review_notes: string;
    approved: boolean;
};

export type BodyRulesEngineActivateRule = {
    rule_id: string;
};

export type BodyRulesEngineCreateAmlRule = {
    rule_name: string;
    rule_code: string;
    rule_type: string;
    category: string;
    description: string;
    business_justification: string;
    conditions: {
        [key: string]: unknown;
    };
    thresholds: {
        [key: string]: unknown;
    };
    applies_to: string;
    customer_segments?: Array<string> | null;
    transaction_types?: Array<string> | null;
    channels?: Array<string> | null;
    risk_weight: number;
    severity_level: string;
    alert_priority: number;
    regulatory_reference?: string | null;
};

export type BodyRulesEngineDeactivateRule = {
    rule_id: string;
    reason: string;
};

export type BodyRulesEngineGetActiveRules = {
    rule_type?: string | null;
};

export type BodyRulesEngineGetRulePerformanceMetrics = {
    rule_id: string;
    days: number;
};

export type BodyRulesEngineTestRuleAgainstHistoricalData = {
    rule_id: string;
    test_period_days: number;
};

export type BodyRulesEngineUpdateRuleThresholds = {
    rule_id: string;
    new_thresholds: {
        [key: string]: unknown;
    };
    reason: string;
};

export type BodyTransactionMonitoringGetSuspiciousTransactions = {
    days: number;
    limit: number;
};

export type BodyTransactionMonitoringPerformAmlMonitoring = {
    transaction: Transaction;
};

export type BodyTransactionMonitoringProcessTransaction = {
    transaction_id: string;
    customer_id: string;
    transaction_type: string;
    amount: number;
    currency: string;
    account_number: string;
    description: string;
    transaction_method: string;
    channel: string;
    beneficiary_name?: string | null;
    beneficiary_account?: string | null;
    beneficiary_bank?: string | null;
    beneficiary_country?: string | null;
    location?: string | null;
    ip_address?: string | null;
    device_id?: string | null;
};

export type Case = {
    id?: string;
    case_number: string;
    case_type: string;
    case_category: string;
    customer_id: string;
    related_customers: Array<string>;
    alert_ids: Array<string>;
    transaction_ids: Array<string>;
    title: string;
    description: string;
    summary?: string | null;
    priority?: number;
    risk_level?: string;
    complexity?: string;
    status?: string;
    investigation_stage?: string;
    assigned_to: string;
    reviewer?: string | null;
    approver?: string | null;
    team_members: Array<string>;
    opened_at?: string;
    assigned_at?: string | null;
    investigation_started_at?: string | null;
    review_started_at?: string | null;
    closed_at?: string | null;
    sla_deadline?: string | null;
    sla_extended?: boolean;
    sla_extension_reason?: string | null;
    sla_breached?: boolean;
    investigation_notes?: string;
    evidence_collected?: {
        [key: string]: unknown;
    };
    interviews_conducted?: Array<{
        [key: string]: unknown;
    }>;
    external_inquiries?: Array<{
        [key: string]: unknown;
    }>;
    findings?: string | null;
    recommendations?: string | null;
    risk_assessment?: string | null;
    regulatory_implications?: boolean;
    decision?: string | null;
    actions_taken: Array<string>;
    str_required?: boolean;
    str_filed?: boolean;
    str_reference?: string | null;
    str_filed_date?: string | null;
    ctr_required?: boolean;
    ctr_filed?: boolean;
    ctr_reference?: string | null;
    ctr_filed_date?: string | null;
    reported_to_authorities?: boolean;
    authority_reference?: string | null;
    authority_response?: string | null;
    qa_reviewed?: boolean;
    qa_reviewer?: string | null;
    qa_notes?: string | null;
    qa_approved?: boolean;
    closure_reason?: string | null;
    closure_notes?: string | null;
    closed_by?: string | null;
    follow_up_required?: boolean;
    follow_up_date?: string | null;
    follow_up_notes?: string | null;
    tags: Array<string>;
    confidentiality_level?: string;
    created_at?: string;
    updated_at?: string;
    created_by: string;
};

export type Customer = {
    id?: string;
    user_id: string;
    first_name: string;
    last_name: string;
    email: string;
    phone: string;
    date_of_birth: string;
    nationality: string;
    customer_id: string;
    bvn?: string | null;
    nin?: string | null;
    kyc_status?: string;
    kyc_level?: string;
    address_line1: string;
    address_line2?: string | null;
    city: string;
    state: string;
    country: string;
    postal_code?: string | null;
    risk_score?: number;
    risk_category?: string;
    pep_status?: boolean;
    sanctions_checked?: boolean;
    last_risk_assessment?: string | null;
    account_numbers: Array<string>;
    account_types: Array<string>;
    account_opening_date: string;
    customer_since: string;
    suspicious_activity_count?: number;
    last_transaction_date?: string | null;
    average_monthly_turnover?: number;
    is_blacklisted?: boolean;
    blacklist_reason?: string | null;
    requires_enhanced_dd?: boolean;
    created_at?: string;
    updated_at?: string;
    created_by: string;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type Report = {
    id?: string;
    report_number: string;
    report_type: string;
    report_category: string;
    case_id?: string | null;
    customer_id: string;
    related_customers: Array<string>;
    transaction_ids: Array<string>;
    alert_ids: Array<string>;
    title: string;
    narrative: string;
    summary: string;
    regulatory_authority?: string;
    regulatory_reference?: string | null;
    filing_requirement: string;
    suspicious_activity_type: string;
    activity_description: string;
    timeline_of_events: string;
    total_amount: number;
    currency?: string;
    subject_information?: {
        [key: string]: unknown;
    };
    involved_parties?: Array<{
        [key: string]: unknown;
    }>;
    financial_institutions?: Array<{
        [key: string]: unknown;
    }>;
    supporting_documents: Array<string>;
    evidence_summary: string;
    investigation_notes: string;
    status?: string;
    prepared_by: string;
    reviewed_by?: string | null;
    approved_by?: string | null;
    incident_date_from: string;
    incident_date_to: string;
    detection_date: string;
    filed?: boolean;
    filing_date?: string | null;
    filing_method?: string | null;
    filing_reference?: string | null;
    filed_by?: string | null;
    acknowledged?: boolean;
    acknowledgment_date?: string | null;
    acknowledgment_reference?: string | null;
    follow_up_required?: boolean;
    follow_up_requests?: Array<{
        [key: string]: unknown;
    }>;
    supplementary_reports: Array<string>;
    qa_reviewed?: boolean;
    qa_reviewer?: string | null;
    qa_notes?: string | null;
    qa_approved?: boolean;
    legal_reviewed?: boolean;
    legal_reviewer?: string | null;
    legal_notes?: string | null;
    privilege_claimed?: boolean;
    export_format?: string;
    export_version?: string | null;
    export_data?: {
        [key: string]: unknown;
    } | null;
    preparation_time?: number | null;
    review_time?: number | null;
    approval_time?: number | null;
    confidentiality_level?: string;
    retention_period?: number;
    tags: Array<string>;
    template_version?: string | null;
    generation_method?: string;
    created_at?: string;
    updated_at?: string;
    created_by: string;
};

export type Rule = {
    id?: string;
    rule_name: string;
    rule_code: string;
    rule_type: string;
    category: string;
    description: string;
    business_justification: string;
    regulatory_reference?: string | null;
    conditions?: {
        [key: string]: unknown;
    };
    thresholds?: {
        [key: string]: unknown;
    };
    parameters?: {
        [key: string]: unknown;
    };
    applies_to?: string;
    customer_segments: Array<string>;
    transaction_types: Array<string>;
    channels: Array<string>;
    risk_weight?: number;
    severity_level?: string;
    alert_priority?: number;
    status?: string;
    version?: string;
    effective_date?: string | null;
    expiry_date?: string | null;
    test_results?: {
        [key: string]: unknown;
    };
    false_positive_rate?: number | null;
    effectiveness_score?: number | null;
    last_tested?: string | null;
    auto_approve?: boolean;
    requires_review?: boolean;
    escalation_threshold?: number | null;
    execution_frequency?: string;
    max_alerts_per_day?: number | null;
    cooling_period?: number | null;
    total_triggers?: number;
    true_positives?: number;
    false_positives?: number;
    alerts_generated?: number;
    cases_created?: number;
    strs_filed?: number;
    last_triggered?: string | null;
    performance_reviewed?: string | null;
    tuning_required?: boolean;
    implementation_notes?: string | null;
    known_limitations?: string | null;
    related_rules: Array<string>;
    regulatory_approval?: boolean;
    approved_by?: string | null;
    approval_date?: string | null;
    compliance_notes?: string | null;
    rule_engine_version?: string | null;
    code_implementation?: string | null;
    dependencies: Array<string>;
    created_at?: string;
    updated_at?: string;
    created_by: string;
    last_modified_by?: string | null;
};

export type Transaction = {
    id?: string;
    transaction_id: string;
    reference_number: string;
    batch_id?: string | null;
    transaction_type: string;
    transaction_method: string;
    currency?: string;
    amount: number;
    customer_id: string;
    account_number: string;
    beneficiary_name?: string | null;
    beneficiary_account?: string | null;
    beneficiary_bank?: string | null;
    beneficiary_country?: string | null;
    description: string;
    purpose_code?: string | null;
    channel: string;
    location?: string | null;
    ip_address?: string | null;
    device_id?: string | null;
    transaction_date: string;
    value_date: string;
    processing_date?: string;
    status?: string;
    failure_reason?: string | null;
    risk_score?: number;
    risk_flags?: {
        [key: string]: unknown;
    };
    is_suspicious?: boolean;
    alert_count?: number;
    structuring_indicator?: boolean;
    velocity_flag?: boolean;
    amount_threshold_flag?: boolean;
    unusual_pattern_flag?: boolean;
    above_ctr_threshold?: boolean;
    cross_border?: boolean;
    cash_transaction?: boolean;
    metadata?: {
        [key: string]: unknown;
    };
    external_data?: {
        [key: string]: unknown;
    };
    created_at?: string;
    updated_at?: string;
    processed_by?: string | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type CustomerServiceCreateCustomerData = {
    body: BodyCustomerServiceCreateCustomer;
    path?: never;
    query?: never;
    url: '/api/customer_service/create_customer';
};

export type CustomerServiceCreateCustomerErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CustomerServiceCreateCustomerError = CustomerServiceCreateCustomerErrors[keyof CustomerServiceCreateCustomerErrors];

export type CustomerServiceCreateCustomerResponses = {
    /**
     * Successful Response
     */
    200: Customer;
};

export type CustomerServiceCreateCustomerResponse = CustomerServiceCreateCustomerResponses[keyof CustomerServiceCreateCustomerResponses];

export type CustomerServiceUpdateCustomerRiskScoreData = {
    body: BodyCustomerServiceUpdateCustomerRiskScore;
    path?: never;
    query?: never;
    url: '/api/customer_service/update_customer_risk_score';
};

export type CustomerServiceUpdateCustomerRiskScoreErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CustomerServiceUpdateCustomerRiskScoreError = CustomerServiceUpdateCustomerRiskScoreErrors[keyof CustomerServiceUpdateCustomerRiskScoreErrors];

export type CustomerServiceUpdateCustomerRiskScoreResponses = {
    /**
     * Successful Response
     */
    200: Customer;
};

export type CustomerServiceUpdateCustomerRiskScoreResponse = CustomerServiceUpdateCustomerRiskScoreResponses[keyof CustomerServiceUpdateCustomerRiskScoreResponses];

export type CustomerServiceGetHighRiskCustomersData = {
    body: BodyCustomerServiceGetHighRiskCustomers;
    path?: never;
    query?: never;
    url: '/api/customer_service/get_high_risk_customers';
};

export type CustomerServiceGetHighRiskCustomersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CustomerServiceGetHighRiskCustomersError = CustomerServiceGetHighRiskCustomersErrors[keyof CustomerServiceGetHighRiskCustomersErrors];

export type CustomerServiceGetHighRiskCustomersResponses = {
    /**
     * Successful Response
     */
    200: Array<Customer>;
};

export type CustomerServiceGetHighRiskCustomersResponse = CustomerServiceGetHighRiskCustomersResponses[keyof CustomerServiceGetHighRiskCustomersResponses];

export type TransactionMonitoringProcessTransactionData = {
    body: BodyTransactionMonitoringProcessTransaction;
    path?: never;
    query?: never;
    url: '/api/transaction_monitoring/process_transaction';
};

export type TransactionMonitoringProcessTransactionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TransactionMonitoringProcessTransactionError = TransactionMonitoringProcessTransactionErrors[keyof TransactionMonitoringProcessTransactionErrors];

export type TransactionMonitoringProcessTransactionResponses = {
    /**
     * Successful Response
     */
    200: Transaction;
};

export type TransactionMonitoringProcessTransactionResponse = TransactionMonitoringProcessTransactionResponses[keyof TransactionMonitoringProcessTransactionResponses];

export type TransactionMonitoringPerformAmlMonitoringData = {
    body: BodyTransactionMonitoringPerformAmlMonitoring;
    path?: never;
    query?: never;
    url: '/api/transaction_monitoring/perform_aml_monitoring';
};

export type TransactionMonitoringPerformAmlMonitoringErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TransactionMonitoringPerformAmlMonitoringError = TransactionMonitoringPerformAmlMonitoringErrors[keyof TransactionMonitoringPerformAmlMonitoringErrors];

export type TransactionMonitoringPerformAmlMonitoringResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type TransactionMonitoringPerformAmlMonitoringResponse = TransactionMonitoringPerformAmlMonitoringResponses[keyof TransactionMonitoringPerformAmlMonitoringResponses];

export type TransactionMonitoringGetSuspiciousTransactionsData = {
    body: BodyTransactionMonitoringGetSuspiciousTransactions;
    path?: never;
    query?: never;
    url: '/api/transaction_monitoring/get_suspicious_transactions';
};

export type TransactionMonitoringGetSuspiciousTransactionsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TransactionMonitoringGetSuspiciousTransactionsError = TransactionMonitoringGetSuspiciousTransactionsErrors[keyof TransactionMonitoringGetSuspiciousTransactionsErrors];

export type TransactionMonitoringGetSuspiciousTransactionsResponses = {
    /**
     * Successful Response
     */
    200: Array<Transaction>;
};

export type TransactionMonitoringGetSuspiciousTransactionsResponse = TransactionMonitoringGetSuspiciousTransactionsResponses[keyof TransactionMonitoringGetSuspiciousTransactionsResponses];

export type CaseManagementCreateCaseFromAlertsData = {
    body: BodyCaseManagementCreateCaseFromAlerts;
    path?: never;
    query?: never;
    url: '/api/case_management/create_case_from_alerts';
};

export type CaseManagementCreateCaseFromAlertsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CaseManagementCreateCaseFromAlertsError = CaseManagementCreateCaseFromAlertsErrors[keyof CaseManagementCreateCaseFromAlertsErrors];

export type CaseManagementCreateCaseFromAlertsResponses = {
    /**
     * Successful Response
     */
    200: Case;
};

export type CaseManagementCreateCaseFromAlertsResponse = CaseManagementCreateCaseFromAlertsResponses[keyof CaseManagementCreateCaseFromAlertsResponses];

export type CaseManagementAssignCaseData = {
    body: BodyCaseManagementAssignCase;
    path?: never;
    query?: never;
    url: '/api/case_management/assign_case';
};

export type CaseManagementAssignCaseErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CaseManagementAssignCaseError = CaseManagementAssignCaseErrors[keyof CaseManagementAssignCaseErrors];

export type CaseManagementAssignCaseResponses = {
    /**
     * Successful Response
     */
    200: Case;
};

export type CaseManagementAssignCaseResponse = CaseManagementAssignCaseResponses[keyof CaseManagementAssignCaseResponses];

export type CaseManagementUpdateCaseStatusData = {
    body: BodyCaseManagementUpdateCaseStatus;
    path?: never;
    query?: never;
    url: '/api/case_management/update_case_status';
};

export type CaseManagementUpdateCaseStatusErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CaseManagementUpdateCaseStatusError = CaseManagementUpdateCaseStatusErrors[keyof CaseManagementUpdateCaseStatusErrors];

export type CaseManagementUpdateCaseStatusResponses = {
    /**
     * Successful Response
     */
    200: Case;
};

export type CaseManagementUpdateCaseStatusResponse = CaseManagementUpdateCaseStatusResponses[keyof CaseManagementUpdateCaseStatusResponses];

export type CaseManagementAddCaseEvidenceData = {
    body: BodyCaseManagementAddCaseEvidence;
    path?: never;
    query?: never;
    url: '/api/case_management/add_case_evidence';
};

export type CaseManagementAddCaseEvidenceErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CaseManagementAddCaseEvidenceError = CaseManagementAddCaseEvidenceErrors[keyof CaseManagementAddCaseEvidenceErrors];

export type CaseManagementAddCaseEvidenceResponses = {
    /**
     * Successful Response
     */
    200: Case;
};

export type CaseManagementAddCaseEvidenceResponse = CaseManagementAddCaseEvidenceResponses[keyof CaseManagementAddCaseEvidenceResponses];

export type CaseManagementConductCustomerInterviewData = {
    body: BodyCaseManagementConductCustomerInterview;
    path?: never;
    query?: never;
    url: '/api/case_management/conduct_customer_interview';
};

export type CaseManagementConductCustomerInterviewErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CaseManagementConductCustomerInterviewError = CaseManagementConductCustomerInterviewErrors[keyof CaseManagementConductCustomerInterviewErrors];

export type CaseManagementConductCustomerInterviewResponses = {
    /**
     * Successful Response
     */
    200: Case;
};

export type CaseManagementConductCustomerInterviewResponse = CaseManagementConductCustomerInterviewResponses[keyof CaseManagementConductCustomerInterviewResponses];

export type CaseManagementCloseCaseData = {
    body: BodyCaseManagementCloseCase;
    path?: never;
    query?: never;
    url: '/api/case_management/close_case';
};

export type CaseManagementCloseCaseErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CaseManagementCloseCaseError = CaseManagementCloseCaseErrors[keyof CaseManagementCloseCaseErrors];

export type CaseManagementCloseCaseResponses = {
    /**
     * Successful Response
     */
    200: Case;
};

export type CaseManagementCloseCaseResponse = CaseManagementCloseCaseResponses[keyof CaseManagementCloseCaseResponses];

export type CaseManagementGetAssignedCasesData = {
    body: BodyCaseManagementGetAssignedCases;
    path?: never;
    query?: never;
    url: '/api/case_management/get_assigned_cases';
};

export type CaseManagementGetAssignedCasesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CaseManagementGetAssignedCasesError = CaseManagementGetAssignedCasesErrors[keyof CaseManagementGetAssignedCasesErrors];

export type CaseManagementGetAssignedCasesResponses = {
    /**
     * Successful Response
     */
    200: Array<Case>;
};

export type CaseManagementGetAssignedCasesResponse = CaseManagementGetAssignedCasesResponses[keyof CaseManagementGetAssignedCasesResponses];

export type CaseManagementGetOverdueCasesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/case_management/get_overdue_cases';
};

export type CaseManagementGetOverdueCasesResponses = {
    /**
     * Successful Response
     */
    200: Array<Case>;
};

export type CaseManagementGetOverdueCasesResponse = CaseManagementGetOverdueCasesResponses[keyof CaseManagementGetOverdueCasesResponses];

export type ReportingServiceCreateStrReportData = {
    body: BodyReportingServiceCreateStrReport;
    path?: never;
    query?: never;
    url: '/api/reporting_service/create_str_report';
};

export type ReportingServiceCreateStrReportErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReportingServiceCreateStrReportError = ReportingServiceCreateStrReportErrors[keyof ReportingServiceCreateStrReportErrors];

export type ReportingServiceCreateStrReportResponses = {
    /**
     * Successful Response
     */
    200: Report;
};

export type ReportingServiceCreateStrReportResponse = ReportingServiceCreateStrReportResponses[keyof ReportingServiceCreateStrReportResponses];

export type ReportingServiceCreateCtrReportData = {
    body: BodyReportingServiceCreateCtrReport;
    path?: never;
    query?: never;
    url: '/api/reporting_service/create_ctr_report';
};

export type ReportingServiceCreateCtrReportErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReportingServiceCreateCtrReportError = ReportingServiceCreateCtrReportErrors[keyof ReportingServiceCreateCtrReportErrors];

export type ReportingServiceCreateCtrReportResponses = {
    /**
     * Successful Response
     */
    200: Report;
};

export type ReportingServiceCreateCtrReportResponse = ReportingServiceCreateCtrReportResponses[keyof ReportingServiceCreateCtrReportResponses];

export type ReportingServiceReviewReportData = {
    body: BodyReportingServiceReviewReport;
    path?: never;
    query?: never;
    url: '/api/reporting_service/review_report';
};

export type ReportingServiceReviewReportErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReportingServiceReviewReportError = ReportingServiceReviewReportErrors[keyof ReportingServiceReviewReportErrors];

export type ReportingServiceReviewReportResponses = {
    /**
     * Successful Response
     */
    200: Report;
};

export type ReportingServiceReviewReportResponse = ReportingServiceReviewReportResponses[keyof ReportingServiceReviewReportResponses];

export type ReportingServiceFileReportWithAuthoritiesData = {
    body: BodyReportingServiceFileReportWithAuthorities;
    path?: never;
    query?: never;
    url: '/api/reporting_service/file_report_with_authorities';
};

export type ReportingServiceFileReportWithAuthoritiesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReportingServiceFileReportWithAuthoritiesError = ReportingServiceFileReportWithAuthoritiesErrors[keyof ReportingServiceFileReportWithAuthoritiesErrors];

export type ReportingServiceFileReportWithAuthoritiesResponses = {
    /**
     * Successful Response
     */
    200: Report;
};

export type ReportingServiceFileReportWithAuthoritiesResponse = ReportingServiceFileReportWithAuthoritiesResponses[keyof ReportingServiceFileReportWithAuthoritiesResponses];

export type ReportingServiceGetPendingReportsData = {
    body: BodyReportingServiceGetPendingReports;
    path?: never;
    query?: never;
    url: '/api/reporting_service/get_pending_reports';
};

export type ReportingServiceGetPendingReportsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReportingServiceGetPendingReportsError = ReportingServiceGetPendingReportsErrors[keyof ReportingServiceGetPendingReportsErrors];

export type ReportingServiceGetPendingReportsResponses = {
    /**
     * Successful Response
     */
    200: Array<Report>;
};

export type ReportingServiceGetPendingReportsResponse = ReportingServiceGetPendingReportsResponses[keyof ReportingServiceGetPendingReportsResponses];

export type ReportingServiceGetFiledReportsData = {
    body: BodyReportingServiceGetFiledReports;
    path?: never;
    query?: never;
    url: '/api/reporting_service/get_filed_reports';
};

export type ReportingServiceGetFiledReportsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReportingServiceGetFiledReportsError = ReportingServiceGetFiledReportsErrors[keyof ReportingServiceGetFiledReportsErrors];

export type ReportingServiceGetFiledReportsResponses = {
    /**
     * Successful Response
     */
    200: Array<Report>;
};

export type ReportingServiceGetFiledReportsResponse = ReportingServiceGetFiledReportsResponses[keyof ReportingServiceGetFiledReportsResponses];

export type RulesEngineCreateAmlRuleData = {
    body: BodyRulesEngineCreateAmlRule;
    path?: never;
    query?: never;
    url: '/api/rules_engine/create_aml_rule';
};

export type RulesEngineCreateAmlRuleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RulesEngineCreateAmlRuleError = RulesEngineCreateAmlRuleErrors[keyof RulesEngineCreateAmlRuleErrors];

export type RulesEngineCreateAmlRuleResponses = {
    /**
     * Successful Response
     */
    200: Rule;
};

export type RulesEngineCreateAmlRuleResponse = RulesEngineCreateAmlRuleResponses[keyof RulesEngineCreateAmlRuleResponses];

export type RulesEngineTestRuleAgainstHistoricalDataData = {
    body: BodyRulesEngineTestRuleAgainstHistoricalData;
    path?: never;
    query?: never;
    url: '/api/rules_engine/test_rule_against_historical_data';
};

export type RulesEngineTestRuleAgainstHistoricalDataErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RulesEngineTestRuleAgainstHistoricalDataError = RulesEngineTestRuleAgainstHistoricalDataErrors[keyof RulesEngineTestRuleAgainstHistoricalDataErrors];

export type RulesEngineTestRuleAgainstHistoricalDataResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type RulesEngineTestRuleAgainstHistoricalDataResponse = RulesEngineTestRuleAgainstHistoricalDataResponses[keyof RulesEngineTestRuleAgainstHistoricalDataResponses];

export type RulesEngineActivateRuleData = {
    body: BodyRulesEngineActivateRule;
    path?: never;
    query?: never;
    url: '/api/rules_engine/activate_rule';
};

export type RulesEngineActivateRuleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RulesEngineActivateRuleError = RulesEngineActivateRuleErrors[keyof RulesEngineActivateRuleErrors];

export type RulesEngineActivateRuleResponses = {
    /**
     * Successful Response
     */
    200: Rule;
};

export type RulesEngineActivateRuleResponse = RulesEngineActivateRuleResponses[keyof RulesEngineActivateRuleResponses];

export type RulesEngineDeactivateRuleData = {
    body: BodyRulesEngineDeactivateRule;
    path?: never;
    query?: never;
    url: '/api/rules_engine/deactivate_rule';
};

export type RulesEngineDeactivateRuleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RulesEngineDeactivateRuleError = RulesEngineDeactivateRuleErrors[keyof RulesEngineDeactivateRuleErrors];

export type RulesEngineDeactivateRuleResponses = {
    /**
     * Successful Response
     */
    200: Rule;
};

export type RulesEngineDeactivateRuleResponse = RulesEngineDeactivateRuleResponses[keyof RulesEngineDeactivateRuleResponses];

export type RulesEngineUpdateRuleThresholdsData = {
    body: BodyRulesEngineUpdateRuleThresholds;
    path?: never;
    query?: never;
    url: '/api/rules_engine/update_rule_thresholds';
};

export type RulesEngineUpdateRuleThresholdsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RulesEngineUpdateRuleThresholdsError = RulesEngineUpdateRuleThresholdsErrors[keyof RulesEngineUpdateRuleThresholdsErrors];

export type RulesEngineUpdateRuleThresholdsResponses = {
    /**
     * Successful Response
     */
    200: Rule;
};

export type RulesEngineUpdateRuleThresholdsResponse = RulesEngineUpdateRuleThresholdsResponses[keyof RulesEngineUpdateRuleThresholdsResponses];

export type RulesEngineGetActiveRulesData = {
    body: BodyRulesEngineGetActiveRules;
    path?: never;
    query?: never;
    url: '/api/rules_engine/get_active_rules';
};

export type RulesEngineGetActiveRulesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RulesEngineGetActiveRulesError = RulesEngineGetActiveRulesErrors[keyof RulesEngineGetActiveRulesErrors];

export type RulesEngineGetActiveRulesResponses = {
    /**
     * Successful Response
     */
    200: Array<Rule>;
};

export type RulesEngineGetActiveRulesResponse = RulesEngineGetActiveRulesResponses[keyof RulesEngineGetActiveRulesResponses];

export type RulesEngineGetRulePerformanceMetricsData = {
    body: BodyRulesEngineGetRulePerformanceMetrics;
    path?: never;
    query?: never;
    url: '/api/rules_engine/get_rule_performance_metrics';
};

export type RulesEngineGetRulePerformanceMetricsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RulesEngineGetRulePerformanceMetricsError = RulesEngineGetRulePerformanceMetricsErrors[keyof RulesEngineGetRulePerformanceMetricsErrors];

export type RulesEngineGetRulePerformanceMetricsResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type RulesEngineGetRulePerformanceMetricsResponse = RulesEngineGetRulePerformanceMetricsResponses[keyof RulesEngineGetRulePerformanceMetricsResponses];

export type AuditServiceSearchAuditLogsData = {
    body: BodyAuditServiceSearchAuditLogs;
    path?: never;
    query?: never;
    url: '/api/audit_service/search_audit_logs';
};

export type AuditServiceSearchAuditLogsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuditServiceSearchAuditLogsError = AuditServiceSearchAuditLogsErrors[keyof AuditServiceSearchAuditLogsErrors];

export type AuditServiceSearchAuditLogsResponses = {
    /**
     * Successful Response
     */
    200: Array<AuditLog>;
};

export type AuditServiceSearchAuditLogsResponse = AuditServiceSearchAuditLogsResponses[keyof AuditServiceSearchAuditLogsResponses];

export type AuditServiceGetUserActivitySummaryData = {
    body: BodyAuditServiceGetUserActivitySummary;
    path?: never;
    query?: never;
    url: '/api/audit_service/get_user_activity_summary';
};

export type AuditServiceGetUserActivitySummaryErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuditServiceGetUserActivitySummaryError = AuditServiceGetUserActivitySummaryErrors[keyof AuditServiceGetUserActivitySummaryErrors];

export type AuditServiceGetUserActivitySummaryResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type AuditServiceGetUserActivitySummaryResponse = AuditServiceGetUserActivitySummaryResponses[keyof AuditServiceGetUserActivitySummaryResponses];