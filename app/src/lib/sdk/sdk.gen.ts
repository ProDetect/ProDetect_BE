// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import type { CustomerServiceCreateCustomerData, CustomerServiceCreateCustomerResponse, CustomerServiceCreateCustomerError, CustomerServiceUpdateCustomerRiskScoreData, CustomerServiceUpdateCustomerRiskScoreResponse, CustomerServiceUpdateCustomerRiskScoreError, CustomerServiceGetHighRiskCustomersData, CustomerServiceGetHighRiskCustomersResponse, CustomerServiceGetHighRiskCustomersError, TransactionMonitoringProcessTransactionData, TransactionMonitoringProcessTransactionResponse, TransactionMonitoringProcessTransactionError, TransactionMonitoringPerformAmlMonitoringData, TransactionMonitoringPerformAmlMonitoringResponse, TransactionMonitoringPerformAmlMonitoringError, TransactionMonitoringGetSuspiciousTransactionsData, TransactionMonitoringGetSuspiciousTransactionsResponse, TransactionMonitoringGetSuspiciousTransactionsError, CaseManagementCreateCaseFromAlertsData, CaseManagementCreateCaseFromAlertsResponse, CaseManagementCreateCaseFromAlertsError, CaseManagementAssignCaseData, CaseManagementAssignCaseResponse, CaseManagementAssignCaseError, CaseManagementUpdateCaseStatusData, CaseManagementUpdateCaseStatusResponse, CaseManagementUpdateCaseStatusError, CaseManagementAddCaseEvidenceData, CaseManagementAddCaseEvidenceResponse, CaseManagementAddCaseEvidenceError, CaseManagementConductCustomerInterviewData, CaseManagementConductCustomerInterviewResponse, CaseManagementConductCustomerInterviewError, CaseManagementCloseCaseData, CaseManagementCloseCaseResponse, CaseManagementCloseCaseError, CaseManagementGetAssignedCasesData, CaseManagementGetAssignedCasesResponse, CaseManagementGetAssignedCasesError, CaseManagementGetOverdueCasesData, CaseManagementGetOverdueCasesResponse, ReportingServiceCreateStrReportData, ReportingServiceCreateStrReportResponse, ReportingServiceCreateStrReportError, ReportingServiceCreateCtrReportData, ReportingServiceCreateCtrReportResponse, ReportingServiceCreateCtrReportError, ReportingServiceReviewReportData, ReportingServiceReviewReportResponse, ReportingServiceReviewReportError, ReportingServiceFileReportWithAuthoritiesData, ReportingServiceFileReportWithAuthoritiesResponse, ReportingServiceFileReportWithAuthoritiesError, ReportingServiceGetPendingReportsData, ReportingServiceGetPendingReportsResponse, ReportingServiceGetPendingReportsError, ReportingServiceGetFiledReportsData, ReportingServiceGetFiledReportsResponse, ReportingServiceGetFiledReportsError, RulesEngineCreateAmlRuleData, RulesEngineCreateAmlRuleResponse, RulesEngineCreateAmlRuleError, RulesEngineTestRuleAgainstHistoricalDataData, RulesEngineTestRuleAgainstHistoricalDataResponse, RulesEngineTestRuleAgainstHistoricalDataError, RulesEngineActivateRuleData, RulesEngineActivateRuleResponse, RulesEngineActivateRuleError, RulesEngineDeactivateRuleData, RulesEngineDeactivateRuleResponse, RulesEngineDeactivateRuleError, RulesEngineUpdateRuleThresholdsData, RulesEngineUpdateRuleThresholdsResponse, RulesEngineUpdateRuleThresholdsError, RulesEngineGetActiveRulesData, RulesEngineGetActiveRulesResponse, RulesEngineGetActiveRulesError, RulesEngineGetRulePerformanceMetricsData, RulesEngineGetRulePerformanceMetricsResponse, RulesEngineGetRulePerformanceMetricsError, AuditServiceSearchAuditLogsData, AuditServiceSearchAuditLogsResponse, AuditServiceSearchAuditLogsError, AuditServiceGetUserActivitySummaryData, AuditServiceGetUserActivitySummaryResponse, AuditServiceGetUserActivitySummaryError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * Customer Service Create Customer
 */
export const customerServiceCreateCustomer = <ThrowOnError extends boolean = false>(options: Options<CustomerServiceCreateCustomerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CustomerServiceCreateCustomerResponse, CustomerServiceCreateCustomerError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer_service/create_customer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Customer Service Update Customer Risk Score
 */
export const customerServiceUpdateCustomerRiskScore = <ThrowOnError extends boolean = false>(options: Options<CustomerServiceUpdateCustomerRiskScoreData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CustomerServiceUpdateCustomerRiskScoreResponse, CustomerServiceUpdateCustomerRiskScoreError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer_service/update_customer_risk_score',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Customer Service Get High Risk Customers
 */
export const customerServiceGetHighRiskCustomers = <ThrowOnError extends boolean = false>(options: Options<CustomerServiceGetHighRiskCustomersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CustomerServiceGetHighRiskCustomersResponse, CustomerServiceGetHighRiskCustomersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer_service/get_high_risk_customers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Transaction Monitoring Process Transaction
 */
export const transactionMonitoringProcessTransaction = <ThrowOnError extends boolean = false>(options: Options<TransactionMonitoringProcessTransactionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TransactionMonitoringProcessTransactionResponse, TransactionMonitoringProcessTransactionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/transaction_monitoring/process_transaction',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Transaction Monitoring Perform Aml Monitoring
 */
export const transactionMonitoringPerformAmlMonitoring = <ThrowOnError extends boolean = false>(options: Options<TransactionMonitoringPerformAmlMonitoringData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TransactionMonitoringPerformAmlMonitoringResponse, TransactionMonitoringPerformAmlMonitoringError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/transaction_monitoring/perform_aml_monitoring',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Transaction Monitoring Get Suspicious Transactions
 */
export const transactionMonitoringGetSuspiciousTransactions = <ThrowOnError extends boolean = false>(options: Options<TransactionMonitoringGetSuspiciousTransactionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TransactionMonitoringGetSuspiciousTransactionsResponse, TransactionMonitoringGetSuspiciousTransactionsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/transaction_monitoring/get_suspicious_transactions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Case Management Create Case From Alerts
 */
export const caseManagementCreateCaseFromAlerts = <ThrowOnError extends boolean = false>(options: Options<CaseManagementCreateCaseFromAlertsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CaseManagementCreateCaseFromAlertsResponse, CaseManagementCreateCaseFromAlertsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/case_management/create_case_from_alerts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Case Management Assign Case
 */
export const caseManagementAssignCase = <ThrowOnError extends boolean = false>(options: Options<CaseManagementAssignCaseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CaseManagementAssignCaseResponse, CaseManagementAssignCaseError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/case_management/assign_case',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Case Management Update Case Status
 */
export const caseManagementUpdateCaseStatus = <ThrowOnError extends boolean = false>(options: Options<CaseManagementUpdateCaseStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CaseManagementUpdateCaseStatusResponse, CaseManagementUpdateCaseStatusError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/case_management/update_case_status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Case Management Add Case Evidence
 */
export const caseManagementAddCaseEvidence = <ThrowOnError extends boolean = false>(options: Options<CaseManagementAddCaseEvidenceData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CaseManagementAddCaseEvidenceResponse, CaseManagementAddCaseEvidenceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/case_management/add_case_evidence',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Case Management Conduct Customer Interview
 */
export const caseManagementConductCustomerInterview = <ThrowOnError extends boolean = false>(options: Options<CaseManagementConductCustomerInterviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CaseManagementConductCustomerInterviewResponse, CaseManagementConductCustomerInterviewError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/case_management/conduct_customer_interview',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Case Management Close Case
 */
export const caseManagementCloseCase = <ThrowOnError extends boolean = false>(options: Options<CaseManagementCloseCaseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CaseManagementCloseCaseResponse, CaseManagementCloseCaseError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/case_management/close_case',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Case Management Get Assigned Cases
 */
export const caseManagementGetAssignedCases = <ThrowOnError extends boolean = false>(options: Options<CaseManagementGetAssignedCasesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CaseManagementGetAssignedCasesResponse, CaseManagementGetAssignedCasesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/case_management/get_assigned_cases',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Case Management Get Overdue Cases
 */
export const caseManagementGetOverdueCases = <ThrowOnError extends boolean = false>(options?: Options<CaseManagementGetOverdueCasesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CaseManagementGetOverdueCasesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/case_management/get_overdue_cases',
        ...options
    });
};

/**
 * Reporting Service Create Str Report
 */
export const reportingServiceCreateStrReport = <ThrowOnError extends boolean = false>(options: Options<ReportingServiceCreateStrReportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ReportingServiceCreateStrReportResponse, ReportingServiceCreateStrReportError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/reporting_service/create_str_report',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reporting Service Create Ctr Report
 */
export const reportingServiceCreateCtrReport = <ThrowOnError extends boolean = false>(options: Options<ReportingServiceCreateCtrReportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ReportingServiceCreateCtrReportResponse, ReportingServiceCreateCtrReportError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/reporting_service/create_ctr_report',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reporting Service Review Report
 */
export const reportingServiceReviewReport = <ThrowOnError extends boolean = false>(options: Options<ReportingServiceReviewReportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ReportingServiceReviewReportResponse, ReportingServiceReviewReportError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/reporting_service/review_report',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reporting Service File Report With Authorities
 */
export const reportingServiceFileReportWithAuthorities = <ThrowOnError extends boolean = false>(options: Options<ReportingServiceFileReportWithAuthoritiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ReportingServiceFileReportWithAuthoritiesResponse, ReportingServiceFileReportWithAuthoritiesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/reporting_service/file_report_with_authorities',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reporting Service Get Pending Reports
 */
export const reportingServiceGetPendingReports = <ThrowOnError extends boolean = false>(options: Options<ReportingServiceGetPendingReportsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ReportingServiceGetPendingReportsResponse, ReportingServiceGetPendingReportsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/reporting_service/get_pending_reports',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reporting Service Get Filed Reports
 */
export const reportingServiceGetFiledReports = <ThrowOnError extends boolean = false>(options: Options<ReportingServiceGetFiledReportsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ReportingServiceGetFiledReportsResponse, ReportingServiceGetFiledReportsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/reporting_service/get_filed_reports',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Rules Engine Create Aml Rule
 */
export const rulesEngineCreateAmlRule = <ThrowOnError extends boolean = false>(options: Options<RulesEngineCreateAmlRuleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RulesEngineCreateAmlRuleResponse, RulesEngineCreateAmlRuleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rules_engine/create_aml_rule',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Rules Engine Test Rule Against Historical Data
 */
export const rulesEngineTestRuleAgainstHistoricalData = <ThrowOnError extends boolean = false>(options: Options<RulesEngineTestRuleAgainstHistoricalDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RulesEngineTestRuleAgainstHistoricalDataResponse, RulesEngineTestRuleAgainstHistoricalDataError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rules_engine/test_rule_against_historical_data',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Rules Engine Activate Rule
 */
export const rulesEngineActivateRule = <ThrowOnError extends boolean = false>(options: Options<RulesEngineActivateRuleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RulesEngineActivateRuleResponse, RulesEngineActivateRuleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rules_engine/activate_rule',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Rules Engine Deactivate Rule
 */
export const rulesEngineDeactivateRule = <ThrowOnError extends boolean = false>(options: Options<RulesEngineDeactivateRuleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RulesEngineDeactivateRuleResponse, RulesEngineDeactivateRuleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rules_engine/deactivate_rule',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Rules Engine Update Rule Thresholds
 */
export const rulesEngineUpdateRuleThresholds = <ThrowOnError extends boolean = false>(options: Options<RulesEngineUpdateRuleThresholdsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RulesEngineUpdateRuleThresholdsResponse, RulesEngineUpdateRuleThresholdsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rules_engine/update_rule_thresholds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Rules Engine Get Active Rules
 */
export const rulesEngineGetActiveRules = <ThrowOnError extends boolean = false>(options: Options<RulesEngineGetActiveRulesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RulesEngineGetActiveRulesResponse, RulesEngineGetActiveRulesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rules_engine/get_active_rules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Rules Engine Get Rule Performance Metrics
 */
export const rulesEngineGetRulePerformanceMetrics = <ThrowOnError extends boolean = false>(options: Options<RulesEngineGetRulePerformanceMetricsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RulesEngineGetRulePerformanceMetricsResponse, RulesEngineGetRulePerformanceMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rules_engine/get_rule_performance_metrics',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Audit Service Search Audit Logs
 */
export const auditServiceSearchAuditLogs = <ThrowOnError extends boolean = false>(options: Options<AuditServiceSearchAuditLogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuditServiceSearchAuditLogsResponse, AuditServiceSearchAuditLogsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/audit_service/search_audit_logs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Audit Service Get User Activity Summary
 */
export const auditServiceGetUserActivitySummary = <ThrowOnError extends boolean = false>(options: Options<AuditServiceGetUserActivitySummaryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuditServiceGetUserActivitySummaryResponse, AuditServiceGetUserActivitySummaryError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/audit_service/get_user_activity_summary',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};